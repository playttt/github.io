;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name ttt.renderer, :imports nil, :requires {pieces ttt.pieces, ttt.pieces ttt.pieces, ttt.edges ttt.edges}, :uses {SUDE ttt.edges, SUFR ttt.edges, INIZ ttt.edges, DETR ttt.edges, IZFR ttt.edges, IZTR ttt.edges, DEFR ttt.edges, SUIZ ttt.edges, INTR ttt.edges, SUTR ttt.edges, INDE ttt.edges, INFR ttt.edges}, :defs {screen-line {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 22, :column 7, :end-line 22, :end-column 18, :arglists (quote ([params p1 p2]))}, :name ttt.renderer/screen-line, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 18, :method-params ([params p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params p1 p2]))}, draw-block-levels {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 156, :column 7, :end-line 156, :end-column 24, :arglists (quote ([window-height left-column-width [w h d] anchored-blocks]))}, :name ttt.renderer/draw-block-levels, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 24, :method-params ([window-height left-column-width p__12251 anchored-blocks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 4, :fn-var true, :arglists (quote ([window-height left-column-width [w h d] anchored-blocks]))}, draw-pit-walls {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 43, :column 7, :end-line 43, :end-column 21, :arglists (quote ([{:keys [tx ty tz], :as params} piece mode]))}, :name ttt.renderer/draw-pit-walls, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 21, :method-params ([p__12177 piece mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [tx ty tz], :as params} piece mode]))}, screen-cube {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 69, :column 7, :end-line 69, :end-column 18, :arglists (quote ([params [x y z] top-color-class sides-color-class]))}, :name ttt.renderer/screen-cube, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 18, :method-params ([params p__12218 top-color-class sides-color-class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 4, :fn-var true, :arglists (quote ([params [x y z] top-color-class sides-color-class]))}, draw-anchored {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 101, :column 7, :end-line 101, :end-column 20, :arglists (quote ([params blocks falling-piece mode]))}, :name ttt.renderer/draw-anchored, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 20, :method-params ([params blocks falling-piece mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 4, :fn-var true, :arglists (quote ([params blocks falling-piece mode]))}, fill-quad {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 30, :column 7, :end-line 30, :end-column 16, :arglists (quote ([color-class & points])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(color-class points)], :arglists ([color-class & points]), :arglists-meta (nil)}}, :name ttt.renderer/fill-quad, :variadic true, :file "src/cljs/ttt/renderer.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(color-class points)], :arglists ([color-class & points]), :arglists-meta (nil)}, :method-params [(color-class points)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists ([color-class & points])}, draw-block-projections {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 35, :column 7, :end-line 35, :end-column 29, :arglists (quote ([{:keys [tx ty tz], :as params} [x y z]]))}, :name ttt.renderer/draw-block-projections, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 29, :method-params ([p__12169 p__12170]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [tx ty tz], :as params} [x y z]]))}, screen-coords {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 16, :column 7, :end-line 16, :end-column 20, :arglists (quote ([{:keys [tx ty tz az cx cy dx dy correction]} [x y z]]))}, :name ttt.renderer/screen-coords, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 20, :method-params ([p__12139 p__12140]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [tx ty tz az cx cy dx dy correction]} [x y z]]))}, abs {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 99, :column 7, :end-line 99, :end-column 10, :arglists (quote ([n]))}, :name ttt.renderer/abs, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, line {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 27, :column 7, :end-line 27, :end-column 11, :arglists (quote ([params [x1 y1] [x2 y2]]))}, :name ttt.renderer/line, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 11, :method-params ([params p__12151 p__12152]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params [x1 y1] [x2 y2]]))}, draw-falling-piece {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 119, :column 7, :end-line 119, :end-column 25, :arglists (quote ([params piece]))}, :name ttt.renderer/draw-falling-piece, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 25, :method-params ([params piece]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([params piece]))}, calculate-params {:protocol-inline nil, :meta {:file "/media/al/linuxdocs/Dropbox/tmp/deleteme/ttt-cljs/src/cljs/ttt/renderer.cljs", :line 7, :column 7, :end-line 7, :end-column 23, :arglists (quote ([[x y z] [width height] [dx dy]]))}, :name ttt.renderer/calculate-params, :variadic false, :file "src/cljs/ttt/renderer.cljs", :end-column 23, :method-params ([p__12130 p__12131 p__12132]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[x y z] [width height] [dx dy]]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :az :dx :w :preserveAspectRatio :tz :ty :y1 :width :dy :points :normal :correction :g :tx :line :h :cx :class :cy :svg :x :x1 :y2 :rect :x2 :edges :height :polygon}, :order [:az :dx :w :tz :ty :dy :correction :tx :h :cx :cy :line :class :x1 :y1 :x2 :y2 :polygon :points :g :normal :edges :svg :x :y :width :height :preserveAspectRatio :rect]}, :doc nil}